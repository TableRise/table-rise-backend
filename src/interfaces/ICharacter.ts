import { z } from 'zod';

const characterZodSchema = z.object({
  system_id: z.string().length(16),
  user_id: z.string().length(16),
  campaign_id: z.string().length(16),
  name: z.string().min(3),
  race: z.enum([
    'anão',
    'elfo',
    'halfling',
    'humano',
    'draconato',
    'gnomo',
    'meio-elfo',
    'meio-orc',
    'tielfling'
  ]),
  background: z.enum([
    'acólito',
    'artesão-de-guilda',
    'artista',
    'charlatão',
    'criminoso',
    'eremita',
    'forasteiro',
    'herói-do-povo',
    'marinheiro',
    'nobre',
    'órfão',
    'sábio',
    'soldado',
  ]),
  custom_background: z.string().optional(),
  alignment: z.enum([
    'leal-e-bom',
    'neutro-e-bom',
    'caótico-e-bom',
    'leal-e-neutro',
    'neutro',
    'caótico-e-neutro',
    'leal-e-mau',
    'neutro-e-mau',
    'caótico-e-mau',
  ]),
  alignment_story_details: z.string(),
  player_name: z.string(),
  experience: z.number().default(0),
  level: z.number().default(0),
  inspiration_bonus: z.number().default(0),
  proficience_bonus: z.number().default(0),
  saving_throws: z.object({
    strength: z.object({
      status: z.boolean(),
      value: z.number().default(0),
    }),
    dexterity: z.object({
      status: z.boolean(),
      value: z.number().default(0),
    }),
    constitution: z.object({
      status: z.boolean(),
      value: z.number().default(0),
    }),
    intelligence: z.object({
      status: z.boolean(),
      value: z.number().default(0),
    }),
    wisdom: z.object({
      status: z.boolean(),
      value: z.number().default(0),
    }),
    charisma: z.object({
      status: z.boolean(),
      value: z.number().default(0),
    }),
  }),
  skills: z.object({
    athletics: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    acrobatics: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    sleightOfHand: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    stealth: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    arcana: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    history: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    investigation: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    nature: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    religion: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    animalHandling: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    insight: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    medicine: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    perception: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    survival: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    deception: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    intimidation: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    performance: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
    persuasion: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      ability: z.string(),
    }),
  }),
  ability_scores: z.object({
    strength: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      modifier: z.number().default(0),
    }),
    dexterity: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      modifier: z.number().default(0),
    }),
    constitution: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      modifier: z.number().default(0),
    }),
    intelligence: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      modifier: z.number().default(0),
    }),
    wisdom: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      modifier: z.number().default(0),
    }),
    charisma: z.object({
      status: z.boolean(),
      value: z.number().default(0),
      modifier: z.number().default(0),
    }),
  }),
  passive_wisdom: z.number().default(0),
  languages: z.enum([
    'Anão',
    'Comum',
    'Élfico',
    'Gigante',
    'Gnômico',
    'Goblin',
    'Halfling',
    'Orc',
    'Abissal',
    'Celestial',
    'Dialeto Subterrâneo',
    'Dracônico',
    'Infernal',
    'Primordial',
    'Silvestre',
    'Subcomum'
  ]),
  extra_proficiences: z.string(),
  armor_class: z.number().default(0),
  initiative: z.number().default(0),
  speed: z.number().default(0),
  hit_points: z.number().default(0),
  actual_hit_points: z.number().default(0),
  temp_hit_points: z.number().default(0),
  attacks: z.array(z.string().length(16)),
  spells: z.array(z.string().length(16)),
  equipment: z.array(z.object({
    name: z.string(),
    damage: z.string().optional(),
    description: z.string().optional(),
  })),
  characteristics_abilities: z.array(z.object({
    name: z.string(),
    damage: z.string().optional(),
    description: z.string().optional(),
  })),
  age: z.string(),
  eyes: z.string(),
  height: z.string(),
  skin: z.string(),
  weight: z.string(),
  hair: z.string(),
  aliances: z.string(),
  appearance: z.string(),
  history: z.string(),
  teasures: z.array(z.object({
    name: z.string(),
    damage: z.string().optional(),
    description: z.string().optional(),
  })),
});

type ICharacter = z.infer<typeof characterZodSchema>;

export { ICharacter, characterZodSchema };
